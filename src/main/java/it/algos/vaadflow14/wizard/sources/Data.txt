package it.algos.@MODULELOWER@.backend.data;

import it.algos.vaadflow14.backend.annotation.AIScript;
import it.algos.vaadflow14.backend.data.FlowData;
import org.springframework.context.annotation.Scope;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import com.vaadin.flow.spring.annotation.SpringComponent;

/**
 * Project @MODULELOWER@
 * Created by Algos
 * User: @USER@
 * Date: @TODAY@
 * Time: @TIME@
 * <p>
 * Check iniziale per la costruzione di alcune collections e delle preferenze <br>
 * Viene invocata PRIMA della chiamata del browser, tramite il <br>
 * metodo FlowBoot.onContextRefreshEvent() <br>
 * Crea i dati di alcune collections sul DB mongo <br>
 * <p>
 * Annotated with @SpringComponent (obbligatorio) <br>
 * Annotated with @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) <br>
 *
 * @since java 8
 */
@SpringComponent
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
@AIScript(sovraScrivibile = false)
public class @MODULEUPPER@Data extends FlowData {


    /**
     * Check iniziale di alcune collections <br>
     * Controlla se le collections sono vuote e, nel caso, le ricrea <br>
     * Vengono create se mancano e se esiste un metodo resetEmptyOnly() nella classe xxxLogic specifica <br>
     * Crea un elenco di entities/collections che implementano il metodo resetEmptyOnly() <br>
     * Può essere sovrascritto, invocando PRIMA il metodo della superclasse <br>
     * L' ordine con cui vengono create le collections è significativo <br>
     *
     * @since java 8
     */
    @Override
    public void fixData() {
        super.fixData();

        String moduleName = "@MODULELOWER@";
        List<String> allEntities;
        String message;

        //--spazzola tutta la directory packages
        allEntities = file.getModuleSubFilesEntity(moduleName);

        //--elabora le collections valide
        allEntities.stream()
                .filter(checkEntity)
                .forEach(resetEmptyOnly);
        message = "Controllati i dati iniziali di @MODULELOWER@";
        logger.log(AETypeLog.checkData, message);
    }

    /**
     * Ricostruisce al valore di default le preferenze standard dell'applicazione <br>
     * Se non esistono, le crea <br>
     * Se esistono, NON modifica i valori esistenti <br>
     * Il metodo reset() può essere chiamato anche dal bottone di  preferenzaLogic <br>
     *
     * @since java 8
     */
    @Override
    public void fixPreferenze() {
        super.fixPreferenze();
    }

}// end of data class