package it.algos.@MODULELOWER@.backend.boot;

import it.algos.vaadflow14.backend.annotation.AIScript;
import it.algos.vaadflow14.backend.application.FlowVar;
import it.algos.vaadflow14.backend.boot.FlowBoot;
import org.springframework.context.annotation.Scope;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import com.vaadin.flow.spring.annotation.SpringComponent;

import java.time.LocalDate;

/**
 * Project @MODULELOWER@
 * Created by Algos
 * User: @USER@
 * Date: @TODAY@
 * Time: @TIME@
 * <p>
 * Running logic after the Spring context has been initialized <br>
 * Executed on container startup, before any browse command <br>
 * <p>
 * Sottoclasse concreta per l' applicazione specifica: <br>
 * - sovrascrive alcune variabili in fixApplicationVar() <br>
 * - costruisce eventuali preferenze specifiche di questa applicazione <br>
 * - lancia gli eventuali schedulers in background <br>
 * - costruisce e regola una eventuale versione demo <br>
 * - controlla l' esistenza di utenti abilitati all' accesso, se usaCompany=true <br>
 * - aggiunge al menu i packages da aprire <br>
 */
@SpringComponent
@Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)
@AIScript(sovraScrivibile = false)
public class @MODULEUPPER@Boot extends FlowBoot {


//    /**
//     * Istanza unica di una classe @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON) di servizio <br>
//     * Iniettata dal framework SpringBoot/Vaadin al termine del ciclo init() del costruttore di questa classe <br>
//     */
//    public @MODULEUPPER@Data @MODULELOWER@Data;


    /**
     * Constructor with @Autowired on setter.<br>
     * Per evitare di avere nel costruttore tutte le property che devono essere iniettate e per poterle aumentare <br>
     * senza dover modificare i costruttori delle sottoclassi, l'iniezione tramite @Autowired <br>
     * viene delegata ad alcuni metodi setter() che vengono qui invocati con valore (ancora) nullo. <br>
     * Al termine del ciclo init() del costruttore il framework SpringBoot/Vaadin, inietterà la relativa istanza <br>
     */
    public @MODULEUPPER@Boot() {
        super();
//        this.set@MODULEUPPER@Data(@MODULELOWER@Data);
    }


    /**
     * Inizializzazione di alcuni parametri del database mongoDB <br>
     * Puo essere sovrascritto, invocando PRIMA il metodo della superclasse <br>
     */
    protected void fixDBMongo() {
        super.fixDBMongo();
    }


    /**
     * Crea le preferenze standard, se non esistono <br>
     * Se non esistono, le crea <br>
     * Se esistono, NON modifica i valori esistenti <br>
     * Per un reset ai valori di default, c'è il metodo reset() chiamato da preferenzaService <br>
     * Puo essere sovrascritto, invocando PRIMA il metodo della superclasse <br>
     */
    protected int creaPreferenze() {
        return super.creaPreferenze();
    }


    /**
     * Regola alcune variabili generali dell' applicazione al loro valore iniziale di default <br>
     * Le variabili (static) sono uniche per tutta l' applicazione, ma il loro valore può essere modificato <br>
     * Deve essere sovrascritto, invocando PRIMA il metodo della superclasse <br>
     */
    @Override
    protected void fixApplicationVar() {
        super.fixApplicationVar();

        FlowVar.usaSecurity = false;
        FlowVar.usaCompany = false;
        FlowVar.projectName = "@MODULEUPPER@";
        FlowVar.projectDescrizione = "Cambia questa descrizione nel file @MODULEUPPER@Boot";
        FlowVar.projectVersion = Double.parseDouble(environment.getProperty("algos.@PROJECT@.version"));
        FlowVar.versionDate = @VERSIONDATE@;
        FlowVar.projectNote = "Sviluppo del modulo base in Vaadin14";
        FlowVar.layoutTitle = "Simple test";
        FlowVar.usaVaadinIcon = true; //@todo Creare una preferenza e sostituirla qui
        FlowVar.usaCronoPackages = false;
        FlowVar.usaGeografiaPackages = false;
    }


    /**
     * Inizializzazione dei dati di alcune collections sul DB mongo <br>
     * Puo essere sovrascritto, invocando PRIMA il metodo della superclasse <br>
     */
    @Override
    protected void initData() {
        super.initData();
        //        simpleData.initData();
    }


    /**
     * Regolazione delle preferenze standard effettuata nella sottoclasse specifica <br>
     * Serve per modificare solo per l'applicazione specifica il valore standard della preferenza <br>
     * Eventuali modifiche delle preferenze specifiche (che peraltro possono essere modificate all'origine) <br>
     * Puo essere sovrascritto, invocando PRIMA il metodo della superclasse <br>
     */
    protected void fixPreferenze() {
         super.fixPreferenze();
   }


    /**
     * Questa classe viene invocata PRIMA della chiamata del browser
     * Se NON usa la security, le @Route vengono create solo qui
     * Se USA la security, le @Route vengono sovrascritte all' apertura del brose nella classe AUserDetailsService
     * <p>
     * Aggiunge le @Route (view) standard
     * Nella sottoclasse concreta che invoca questo metodo, aggiunge le @Route (view) specifiche dell' applicazione
     * Le @Route vengono aggiunte ad una Lista statica mantenuta in FlowVar
     * Verranno lette da MainLayout la prima volta che il browser 'chiama' una view
     * Deve essere sovrascritto, invocando PRIMA il metodo della superclasse <br>
     */
    @Override
    protected void addMenuRoutes() {
        super.addMenuRoutes();
    }

//    public void set@MODULEUPPER@Data(@MODULEUPPER@Data @MODULELOWER@Data) {
//        this.@MODULELOWER@Data = @MODULELOWER@Data;
//    }

}// end of boot class